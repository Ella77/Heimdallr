Index: src/main/scala/chat/ChatRoomActor.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/scala/chat/ChatRoomActor.scala	(date 1539573337000)
+++ src/main/scala/chat/ChatRoomActor.scala	(date 1539667046000)
@@ -26,16 +26,21 @@
 object ChatRoomActor {
   case object Join
   case class ChatMessage(message: String)
+//  def apply(roomId:Int) = new ChatRoomActor(roomId)
 }
 
-class ChatRoomActor extends Actor {
+class ChatRoomActor(roomId: Int) extends Actor {
   implicit val executionContext: ExecutionContext = context.dispatcher
   implicit val system = ActorSystem("heimdallr", ConfigFactory.load())
 
   import ChatRoomActor._
+
   var users: Set[ActorRef] = Set.empty
-
-  val chatRoomName = self.path.name
+  println("users"+users)
+  var chatRoomName = self.path.name
+  //  var chatRoomName = self.path.name
+  println("path"+chatRoomName)
+  //  val chatRoomName = self.path.name
   var redisIp = system.settings.config.getString("akka.redis-ip")
   var redisPort = system.settings.config.getInt("akka.redis-port")
   val s = new RedisClient(redisIp, redisPort)
@@ -56,19 +61,19 @@
             s.unsubscribe
 
           case x if x startsWith "-" =>
-            val p : Seq[Char] = x
+            val p: Seq[Char] = x
             p match {
-              case Seq('-', rest @ _*)=>
+              case Seq('-', rest@_*) =>
                 s.unsubscribe(rest.toString)
             }
 
           case x if x startsWith "+" =>
-            val p : Seq[Char] = x
+            val p: Seq[Char] = x
             p match {
-              case Seq('+', rest @ _*)=>
-                s.subscribe(rest.toString){m => }
+              case Seq('+', rest@_*) =>
+                s.subscribe(rest.toString) { m => }
             }
-            
+
           // TODO if message is coming from others, broadcast to locally connected users
           case x =>
             println("received message on channel " + channel + " as : " + x)
@@ -88,8 +93,10 @@
 
     case msg: ChatMessage =>
       // sync local message with others
-      p.publish(chatRoomName, msg.message);
-      users.foreach(_ ! msg)
+      p.publish(chatRoomName, msg.message)
+      broadcast(msg)
   }
 
-}
+
+  def broadcast(message: ChatMessage) : Unit = users.foreach(_ ! message)
+}
\ No newline at end of file
Index: build.sbt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build.sbt	(date 1539573337000)
+++ build.sbt	(date 1539574049000)
@@ -27,5 +27,6 @@
   "com.typesafe.akka" %% "akka-http-experimental" % "2.4.4",
   "com.typesafe.scala-logging" % "scala-logging-slf4j_2.11" % "2.1.2",
   "com.typesafe.akka" % "akka-slf4j_2.11" % "2.4.1",
-  "net.debasishg" %% "redisclient" % "3.8"
+  "net.debasishg" %% "redisclient" % "3.8",
+  "commons-daemon" % "commons-daemon" % "1.0.15"
 )
Index: src/main/resources/application.conf
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/application.conf	(date 1539573337000)
+++ src/main/resources/application.conf	(date 1539653180000)
@@ -17,7 +17,7 @@
 
 akka {
 
-  redis-ip = "192.168.0.116"
+  redis-ip = "192.168.0.84"
   redis-port = 6379
 
   # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
@@ -27,7 +27,7 @@
   # Log level used by the configured loggers (see "loggers") as soon
   # as they have been started; before that, see "stdout-loglevel"
   # Options: OFF, ERROR, WARNING, INFO, DEBUG
-  loglevel = "INFO"
+  loglevel = "OFF"
 
   # Log level for the very basic logger activated during ActorSystem startup.
   # This logger prints the log messages to stdout (System.out).
Index: .idea/modules/heimdallr.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/modules/heimdallr.iml	(date 1539573337000)
+++ .idea/modules/heimdallr.iml	(date 1539662138000)
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id="heimdallr [file:/Users/edwardyoon/Heimdallr/]" external.linked.project.path="$MODULE_DIR$/../.." external.root.project.path="$MODULE_DIR$/../.." external.system.id="SBT" type="JAVA_MODULE" version="4">
+<module external.linked.project.id="heimdallr [file:/Users/soojin/IdeaProjects/Heimdallr/]" external.linked.project.path="$MODULE_DIR$/../.." external.root.project.path="$MODULE_DIR$/../.." external.system.id="SBT" type="JAVA_MODULE" version="4">
   <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_8">
     <output url="file://$MODULE_DIR$/../../target/scala-2.11/classes" />
     <output-test url="file://$MODULE_DIR$/../../target/scala-2.11/test-classes" />
@@ -32,5 +32,6 @@
     <orderEntry type="library" name="sbt: com.typesafe.akka:akka-http-core_2.11:10.1.4:jar" level="project" />
     <orderEntry type="library" name="sbt: com.typesafe.akka:akka-actor_2.11:2.5.16:jar" level="project" />
     <orderEntry type="library" name="sbt: com.typesafe:ssl-config-core_2.11:0.2.4:jar" level="project" />
+    <orderEntry type="library" name="sbt: commons-daemon:commons-daemon:1.0.15:jar" level="project" />
   </component>
 </module>
\ No newline at end of file
Index: src/main/scala/chat/Server.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/scala/chat/Server.scala	(date 1539573337000)
+++ src/main/scala/chat/Server.scala	(date 1539668295000)
@@ -28,17 +28,33 @@
 import scala.concurrent.Await
 import scala.io.StdIn
 import com.typesafe.config.ConfigFactory
+import chat._
+import scala.util.{Failure,Success}
+import scala.concurrent.ExecutionContext.Implicits._
 
-object Server {
-  def main(args: Array[String]): Unit = {
+
+object Server extends App{
 
     implicit val system = ActorSystem("heimdallr", ConfigFactory.load())
     implicit val materializer = ActorMaterializer()
 
-    val chatRoom = system.actorOf(Props(new ChatRoomActor), "chat")
 
-    def newUser(): Flow[Message, Message, NotUsed] = {
-      // new connection - new user actor
+    def newUser(number:Int): Flow[Message, Message, NotUsed] = {
+//       new connection - new user actor
+//      val chatRoom = system.actorOf(Props(
+       ChatRooms.findOrCreate(number)
+
+//      println(c)
+//      println(number)
+//      val st = number.toString
+
+//      val chatRoom = ChatRoom(number)
+//      println(chatroom)
+      val td = number.toString
+      println("String"+td)
+
+      val chatRoom = system.actorOf(Props(classOf[ChatRoomActor],number))
+      print(chatRoom)
       val userActor = system.actorOf(Props(new UserActor(chatRoom)))
 
       val incomingMessages: Sink[Message, NotUsed] =
@@ -63,18 +79,31 @@
     }
 
     val route =
-      path("chat") {
-        get {
-          handleWebSocketMessages(newUser())
+
+      pathPrefix(IntNumber) {
+        chatId => {
+
+          handleWebSocketMessages(newUser(chatId))
         }
       }
+//  def route(implicit actorSystem:ActorSystem, materializer : Materializer): Route = pathPrefix("ws-chat"/ IntNumber)
+//{ chatId => parameter('name){userName =>
+//  handleWebsocketMessages(ChatRooms.findOrCreate(chatId).websocketFlow(userName))
+//}}
 
-    val binding = Await.result(Http().bindAndHandle(route, "0.0.0.0", 8080), 30.seconds)
+    val binding = Http().bindAndHandle(route, "0.0.0.0", 8080)
 
     // the rest of the sample code will go here
-    println("Started server at 127.0.0.1:8080, press enter to kill server")
-    StdIn.readLine()
-    system.terminate()
+//    println("Started server at 127.0.0.1:8080, press enter to kill server")
+
+  binding.onComplete{
+    case Success(binding) =>
+      val localAddress = binding.localAddress
+      println(s"Server is listening on ${localAddress.getHostName}:${localAddress.getPort}")
+    case Failure(e) =>
+      println(s"Binding failed with ${e.getMessage}")
+      system.terminate()
+    }
   }
 
-}
+
Index: src/main/scala/chat/UserActor.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/scala/chat/UserActor.scala	(date 1539573337000)
+++ src/main/scala/chat/UserActor.scala	(date 1539596801000)
@@ -38,11 +38,14 @@
   def connected(outgoing: ActorRef): Receive = {
     chatRoom ! ChatRoomActor.Join
 
+
     {
       case IncomingMessage(text) =>
+        println("sending ok")
         chatRoom ! ChatRoomActor.ChatMessage(text)
 
       case ChatRoomActor.ChatMessage(text) =>
+        println("sending..")
         outgoing ! OutgoingMessage(text)
     }
   }
Index: .idea/modules/heimdallr-build.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/modules/heimdallr-build.iml	(date 1539573337000)
+++ .idea/modules/heimdallr-build.iml	(date 1539574076000)
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<module external.linked.project.id="heimdallr-build [file:/Users/edwardyoon/Heimdallr/]" external.linked.project.path="$MODULE_DIR$/../../project" external.root.project.path="$MODULE_DIR$/../.." external.system.id="SBT" sbt.imports="_root_.sbt.plugins.IvyPlugin, _root_.sbt.plugins.JvmPlugin, _root_.sbt.plugins.CorePlugin, _root_.sbt.plugins.JUnitXmlReportPlugin, sbt._, Keys._, dsl._" sbt.resolvers="https://repo1.maven.org/maven2/|maven|public, file:/Users/edwardyoon/.sbt/preloaded/|maven|local-preloaded, /Users/edwardyoon/.ivy2/cache|ivy|Local cache" type="SBT_MODULE" version="4">
+<module external.linked.project.id="heimdallr-build [file:/Users/soojin/IdeaProjects/Heimdallr/]" external.linked.project.path="$MODULE_DIR$/../../project" external.root.project.path="$MODULE_DIR$/../.." external.system.id="SBT" sbt.imports="_root_.sbt.plugins.IvyPlugin, _root_.sbt.plugins.JvmPlugin, _root_.sbt.plugins.CorePlugin, _root_.sbt.plugins.JUnitXmlReportPlugin, sbt._, Keys._, dsl._" sbt.resolvers="https://repo1.maven.org/maven2/|maven|public, file:/Users/soojin/.sbt/preloaded/|maven|local-preloaded, /Users/soojin/.ivy2/cache|ivy|Local cache" type="SBT_MODULE" version="4">
   <component name="NewModuleRootManager">
     <output url="file://$MODULE_DIR$/../../project/target/idea-classes" />
     <output-test url="file://$MODULE_DIR$/../../project/target/idea-test-classes" />
